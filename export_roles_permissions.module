<?php

/**
 * @file
 * Provides a way of exporting roles in to code.
 */

/**
 * Implements hook_menu().
 */
function export_roles_permissions_menu() {
  $items = array();

  $items['admin/user/roles/export'] = array(
    'title' => 'Export',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('export_roles_permissions_form'),
    'access arguments' => array('administer permissions'),
    'file' => 'export_roles_permissions.admin.inc',
  );

  return $items;
}

/**
 * Determine the permissions for one or more roles.
 *
 * This is a back port of the Drupal 7 user_role_permissions() function.
 *
 * @param array $roles
 *   An array whose keys are the role IDs of interest, such as $user->roles.
 *
 * @return array
 *   If $roles is a non-empty array, an array indexed by role ID is returned.
 *   Each value is an array of the permission strings for the given role ID.
 *   If $roles is empty an empty array is returned.
 */
function export_roles_permissions_get_role_permissions($roles = array()) {
  static $cache = array();

  $role_permissions = $fetch = array();

  if ($roles) {
    foreach ($roles as $rid => $name) {
      if (isset($cache[$rid])) {
        $role_permissions[$rid] = $cache[$rid];
      }
      else {
        // Add this rid to the list of those needing to be fetched.
        $fetch[] = $rid;
        // Prepare in case no permissions are returned.
        $cache[$rid] = array();
      }
    }

    if ($fetch) {
      // Get from the database permissions that were not in the static variable.
      // Only role IDs with at least one permission assigned will return rows.
      $result = db_query('SELECT rid, perm FROM {permission} WHERE rid IN (' . db_placeholders($fetch) . ')', $fetch);
      while ($row = db_fetch_object($result)) {
        $cache[$row->rid] = explode(', ', $row->perm);
      }
      foreach ($fetch as $rid) {
        // For every rid, we know we at least assigned an empty array.
        $role_permissions[$rid] = $cache[$rid];
      }
    }
  }

  return $role_permissions;
}

/**
 * Grants permissions to a user role.
 *
 * This is a back port of the Drupal 7 user_role_grant_permissions() function.
 *
 * @param int $rid
 *   The ID of a user role to alter.
 * @param array $permissions
 *   A list of permission names to grant.
 */
function export_roles_permissions_grant_permissions($rid, $permissions) {
  // If given array is empty, there's nothing to do.
  if (empty($permissions)) {
    return;
  }

  // Make sure given role ID is valid first. If not, there is nothing to do.
  $role = db_fetch_object(db_query("SELECT rid FROM {role} WHERE rid = %d", array($rid)));
  if ($role === FALSE) {
    return;
  }

  // Load all permissions granted to given role.
  $role_row = db_fetch_object(db_query("SELECT * FROM {permission} WHERE rid = %d", array($rid)));

  // If none was found, insert an empty entry in database so that we can simply
  // update it further down.
  if ($role_row === FALSE) {
    $role_row = new StdClass();
    $role_row->rid = $rid;
    $role_row->perm = '';

    db_query("INSERT INTO {permission} (rid, perm) VALUES(%d, '%s')", array($role_row->rid, $role_row->perm));

    $role_row->pid = db_last_insert_id('permission', 'pid');
  }

  // Extract list of current permissions:
  $current_permissions = explode(', ', $role_row->perm);

  // Add new permissions:
  $new_permissions = array_merge($current_permissions, $permissions);
  $new_permissions = array_unique($new_permissions);
  // Remove empty strings.
  $new_permissions = array_filter($new_permissions, function($value) {
    return $value !== "";
  });

  db_query("UPDATE {permission} SET perm = '%s' WHERE pid = %d", array(implode(', ', $new_permissions), $role_row->pid));
}

/**
 * Fetches a user role object by role name.
 *
 * This is a back port of the Drupal 7 user_role_load_by_name() function.
 *
 * @param string $role_name
 *   A string representing the role name.
 *
 * @return object|FALSE
 *   A fully-loaded role object if a role with the given name exists, or FALSE
 *   otherwise.
 */
function export_roles_permissions_user_role_load_by_name($role_name) {
  return db_fetch_object(db_query('SELECT * FROM {role} WHERE name = "%s"', array($role_name)));
}
